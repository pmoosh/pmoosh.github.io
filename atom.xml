<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yaba - Yet another blog attempt]]></title>
  <link href="http://pmoosh.github.io/atom.xml" rel="self"/>
  <link href="http://pmoosh.github.io/"/>
  <updated>2014-12-25T11:37:49-08:00</updated>
  <id>http://pmoosh.github.io/</id>
  <author>
    <name><![CDATA[Peter Mooshammer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basics Operation on a Private Docker Registry]]></title>
    <link href="http://pmoosh.github.io/blog/2014/12/24/basics-operation-on-a-private-docker-registry/"/>
    <updated>2014-12-24T23:51:58-08:00</updated>
    <id>http://pmoosh.github.io/blog/2014/12/24/basics-operation-on-a-private-docker-registry</id>
    <content type="html"><![CDATA[<h2>Basic Operations on a private Docker registry</h2>

<p>Getting started with a private Docker registry means a lot of searching on Google. Unfortunately, I couldn&rsquo;t find a single site that would cover the basic operations such as search for images or tags. So here is a little write up, that I covers some of it.</p>

<h3>Docker Login</h3>

<p>In order to do push and pull operations on the private registry a user has to be authenticated (via nginx proxy) and logged in.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker login docker.example.com</span></code></pre></td></tr></table></div></figure>


<p>This will generate a <code>.dockercfg</code> file on the system where the login will be stored.</p>

<h3>Search the private index</h3>

<p>There are two methods for search available:</p>

<h4>Docker Search</h4>

<p>Docker search allows for some simple searches in the private index. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker search docker.example.com/ubuntu</span></code></pre></td></tr></table></div></figure>


<p>However, if a nginx proxy sits in front of private Registry for authentication, you need to add user and password in front of the URL (Note: Unfortunately <code>docker search</code> will not take the login credentials as stored in the <code>.dockercfg</code> file):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker search user:password@docker.example.com/ubuntu
</span><span class='line'>
</span><span class='line'>NAME             DESCRIPTION   STARS     OFFICIAL   AUTOMATED
</span><span class='line'>library/ubuntu                 0</span></code></pre></td></tr></table></div></figure>


<p>This will give you some information about the ubuntu repositories stored in the private registry, if one exists. <code>docker search</code> also allows for partial searches, so such as using <code>ubu</code> instead of <code>ubuntu</code> as search terms.</p>

<h4><a href="https://docs.docker.com/reference/api/registry_api/">Docker Registry API</a></h4>

<p>A less elegant but much more flexible way to search the registry is the use of the Docker Registry API</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X GET https://user:passwd@docker.example.com/v1/search?q=ubuntu</span></code></pre></td></tr></table></div></figure>


<p>or a more generic search:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s -X GET https://user:passwd@ocker.example.com/v1/search</span></code></pre></td></tr></table></div></figure>


<p>generates json lists, which can be further formated with a tool like <a href="http://stedolan.github.io/jq/">jq</a>
For example the following command line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s -X GET https://user:passwd@docker.example.com/v1/search | jq '.results[].name'</span></code></pre></td></tr></table></div></figure>


<p>would produce an output like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"library/nginx"
</span><span class='line'>"library/aws_cli"
</span><span class='line'>"library/redis"
</span><span class='line'>"library/debian"
</span><span class='line'>"library/busybox"
</span><span class='line'>"library/ubuntu"
</span><span class='line'>"library/commit_test"
</span><span class='line'>"library/logstash"
</span><span class='line'>"library/logstash-forwarder"
</span><span class='line'>"library/base"</span></code></pre></td></tr></table></div></figure>


<h3>Delete Operations</h3>

<p>Delete operations are only available via the Docker Registry API. Note there is easy way to remove a image from a private registry, something that could help to recude storage space. The reason for is that layers of one image may rely layers from other images.</p>

<h4>Delete a repository tag</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X DELETE https://user:passwd@docker.example.com/v1/repositories/library/ubuntu/12.04</span></code></pre></td></tr></table></div></figure>


<h4>Delete a complete repository</h4>

<p>(using the ubuntu repo as example)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X DELETE https://user:passwd@docker.example.com/v1/repositories/library/ubuntu/</span></code></pre></td></tr></table></div></figure>


<h3>Checking repository tags</h3>

<p>Here is an example (using the ubuntu repo) of checking the exixting tags in a repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -X GET https://user:passwd@docker.example.com/v1/repositories/library/ubuntu/tags</span></code></pre></td></tr></table></div></figure>


<p>Example output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"12.04": "58c0a77963eaca09a68febbda32683812f3ff3615cc1ffa305cee67aa591fe26",
</span><span class='line'>"14.04": "86ce37374f40e95cfe8af7327c34ea9919ef216ea965377565fcfad3c378a2c3"}</span></code></pre></td></tr></table></div></figure>


<h3>Pushing Container images to the private Registry</h3>

<h4>Tagging a Container Image</h4>

<p>In order to push a container image to a private Docker Registry the image needs to tagged accordingly. This can be done when the container is built.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker build --rm -t docker.example.com/logstash-fwd .</span></code></pre></td></tr></table></div></figure>


<p>This will automatically tag the images with the <code>latest</code> tag. To mark the images with a more specific version tag run the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker tag docker.example.com/logstash-fwd docker.example.com/logstash-fwd:0.0.1</span></code></pre></td></tr></table></div></figure>


<p>After these two operations the image will have two tags <code>0.0.1</code> and <code>latest</code>. The <code>latest</code> tag is implicit if you pull the image with the registry name only.</p>

<h4>Pushing the Container Image to the Registry</h4>

<p>After the image is tagged correctly it can be pushed to the registry with command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker push docker.example.com/logstash-fwd:0.0.1 .</span></code></pre></td></tr></table></div></figure>


<p>Note: For this operation you have to be <a href="#Docker%20Login">logged in</a> into the registry. The docker-client will not throw an error if you are not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Behind an Amazon Load Balancer]]></title>
    <link href="http://pmoosh.github.io/blog/2014/09/08/django-behind-an-amazon-load-balancer/"/>
    <updated>2014-09-08T16:58:20-07:00</updated>
    <id>http://pmoosh.github.io/blog/2014/09/08/django-behind-an-amazon-load-balancer</id>
    <content type="html"><![CDATA[<p>We had to configure django behind a AWS load balancer and that would mean that whenever the IP of the load balancer changes we would to change the ALLOWED_HOSTS
in the settings section. Note: This is for the ELB health check. Some on the web suggest to circumvent the ALLOWED_HOSTS by simple allowing any host,
which we didn&rsquo;t want to do. So here is the solution
I found on <a href="http://dryan.me/articles/elb-django-allowed-hosts/">Daniel Ryan&rsquo;s</a> site:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Hosts/domain names that are valid for this site; required if DEBUG is False
</span><span class='line'># See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts
</span><span class='line'>ALLOWED_HOSTS = [
</span><span class='line'>    'WHATEVER YOU NEED'
</span><span class='line'>]
</span><span class='line'> 
</span><span class='line'>import requests
</span><span class='line'>EC2_PRIVATE_IP  =   None
</span><span class='line'>try:
</span><span class='line'>    EC2_PRIVATE_IP  =   requests.get('http://169.254.169.254/latest/meta-data/local-ipv4', timeout = 0.01).text
</span><span class='line'>except requests.exceptions.RequestException:
</span><span class='line'>    pass
</span><span class='line'> 
</span><span class='line'>if EC2_PRIVATE_IP:
</span><span class='line'>    ALLOWED_HOSTS.append(EC2_PRIVATE_IP)</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So I Don't Forget Again]]></title>
    <link href="http://pmoosh.github.io/blog/2014/08/19/so-i-dont-forget-again/"/>
    <updated>2014-08-19T23:30:56-07:00</updated>
    <id>http://pmoosh.github.io/blog/2014/08/19/so-i-dont-forget-again</id>
    <content type="html"><![CDATA[<p>This is one of the blog posts that is mostly for I am still digging into chef and all its details. There are many blogs out there, however chef develops so rapidly that many of the blogs are outdated. I am sure this will also happen to this blog entry&hellip;.</p>

<p>Today I had to work with encrypted data bags. They are easy to create with knife and a chef server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>knife data bag from file DATA_BAG_NAME /path/to/DATA_BAG_ITEM.json --secret-file /path/to/encrypted_data_bag_secret</span></code></pre></td></tr></table></div></figure>


<p>But since I needed them locally on my system - I am using chef solo with vagrant - I wanted to download them again. So here is how I got it done. There might other better ways&hellip;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>knife data bag show DATA_BAG_NAME --format json DATA_BAG_ITEM &gt; /path/to_encrypted/DATA_BAG_ITEM.json</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OSX - Pbcopy and Pbpaste]]></title>
    <link href="http://pmoosh.github.io/blog/2014/08/18/mac-osx-pbcopy-and-pbpaste/"/>
    <updated>2014-08-18T18:06:45-07:00</updated>
    <id>http://pmoosh.github.io/blog/2014/08/18/mac-osx-pbcopy-and-pbpaste</id>
    <content type="html"><![CDATA[<p>One of the small but helpful tools that Mac OS X provides are pbcopy and pbpaste.
They provide copying and pasting to the pasteboard (the Clipboard) from the command line.</p>

<p>So you can pipe your massive json file onto the pastboard with a simple command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat huge.json | pbcopy</span></code></pre></td></tr></table></div></figure>


<p>Now you have it in the pasteboard (clipboard) and paste it in your favorite json lint site - like <a href="http://jsonlint.com">JsonLint</a> or <a href="http://www.freeformatter.com/json-validator.html">FREEFORMATTER.COM</a>. Another site I was just recently introduced to is the <a href="http://www.bodurov.com/JsonFormatter/">Collapsible JSON Formatter</a>.</p>

<p>One way I use pbpaste is when copying keys created on websites. After I copied the key to the pasteboard I will run the command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pbpaste &gt; keyfile.pem</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it.</p>
]]></content>
  </entry>
  
</feed>
